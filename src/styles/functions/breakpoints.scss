/* stylelint-disable scss/dollar-variable-empty-line-before */
@use 'sass:map';
@use 'sass:list';
@use './utility' as *;

/* Calculates a 'max-width' value for each breakpoint, except for the last one.
Returns initial map which now also contains these values. */

@function populate-breakpoints-with-max-widths($min-widths) {
  $breakpoints-interspace: 0.2px;
  $both-boundaries: $min-widths;

  @for $i from 1 to list.length($min-widths) {
    $next-min-width: map.get(
      $min-widths,
      nth-map-key($min-widths, $i + 1),
      'min-width'
    );

    $this-max-width: $next-min-width - $breakpoints-interspace;

    $both-boundaries: map.set(
      $both-boundaries,
      nth-map-key($both-boundaries, $i),
      'max-width',
      $this-max-width
    );
  }

  @return $both-boundaries;
}

/* Creates a media query for each breakpoint by using 'min-width' and calculated
'max-width' values. Returns initial map which now also contains these queries. */

@function populate-breakpoints-with-media-queries($min-widths) {
  $both-boundaries: populate-breakpoints-with-max-widths($min-widths);
  $queries: $both-boundaries;

  @for $i from 1 through list.length($both-boundaries) {
    $min-width: map.get(
      $both-boundaries,
      nth-map-key($both-boundaries, $i),
      'min-width'
    );
    $max-width: map.get(
      $both-boundaries,
      nth-map-key($both-boundaries, $i),
      'max-width'
    );
    $query: null;

    /* The first breakpoint doesn't require a 'min-width' limitation */
    @if $i == 1 {
      $query: '(max-width: #{$max-width})';
    }

    /* The last breakpoint doesn't require a 'max-width' limitation */
    @else if $i == list.length($both-boundaries) {
      $query: '(min-width: #{$min-width})';
    }

    /* The ones in-between need both */
    @else {
      $query: '(min-width: #{$min-width}) and (max-width: #{$max-width})';
    }

    $queries: map.set($queries, nth-map-key($queries, $i), 'query', $query);
  }

  @return $queries;
}
