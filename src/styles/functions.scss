@use 'sass:map';
@use 'sass:list';

@function nth-map-key($map, $n) {
  $keys: map.keys($map);

  @return list.nth($keys, $n);
}

@function populate-with-media-queries($breakpoints) {
  /* Calculate a 'max-width' value for each screen size, except for the last
  one, and store them in $breakpoints */

  @for $i from 1 to list.length($breakpoints) {
    $next-min-width: map.get(
      $breakpoints,
      nth-map-key($breakpoints, $i + 1),
      'min-width'
    );
    $this-max-width: $next-min-width - 0.2px;
    $breakpoints: map.set(
      $breakpoints,
      nth-map-key($breakpoints, $i),
      'max-width',
      $this-max-width
    );
  }

  /* Create a media query for each screen size by using 'min-width' and
  previously calculated 'max-width' values and store them in $breakpoints */

  @for $i from 1 through list.length($breakpoints) {
    $min-width: map.get(
      $breakpoints,
      nth-map-key($breakpoints, $i),
      'min-width'
    );
    $max-width: map.get(
      $breakpoints,
      nth-map-key($breakpoints, $i),
      'max-width'
    );
    $query: '';

    /* The first screen size doesn't require a 'min-width' limitation */
    @if $i == 1 {
      $query: '(max-width: #{$max-width})';
    }

    /* The last screen size doesn't require a 'max-width' limitation */
    @else if $i == list.length($breakpoints) {
      $query: '(min-width: #{$min-width})';
    }

    /* The ones in-between need both */
    @else {
      $query: '(min-width: #{$min-width}) and (max-width: #{$max-width})';
    }

    $breakpoints: map.set(
      $breakpoints,
      nth-map-key($breakpoints, $i),
      'query',
      $query
    );
  }

  @return $breakpoints;
}
